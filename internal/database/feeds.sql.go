// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feeds.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addFeed = `-- name: AddFeed :one
INSERT INTO feeds(
    id,
    created_at,
    updated_at,
    name,
    url,
    user_id
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
RETURNING id, created_at, updated_at, name, url, user_id, last_fetched_at
`

type AddFeedParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    uuid.UUID
}

func (q *Queries) AddFeed(ctx context.Context, arg AddFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, addFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
	)
	return i, err
}

const getFeeds = `-- name: GetFeeds :many
WITH 
    follow_count AS (
        SELECT 
            feed_id,
            COUNT(user_id) AS follower_count
        FROM feed_follows
        GROUP BY feed_id
),
    post_count AS (
        SELECT 
            feed_id,
            COUNT(id) AS post_count
        FROM posts
        GROUP BY feed_id
)
SELECT 
    f.id, 
    f.name, 
    f.url, 
    f.user_id, 
    u.name AS user_name,
    fc.follower_count,
    pc.post_count
FROM feeds f
INNER JOIN users u
ON f.user_id = u.id
LEFT JOIN follow_count fc
ON f.id = fc.feed_id
LEFT JOIN post_count pc
ON f.id = pc.feed_id
`

type GetFeedsRow struct {
	ID            uuid.UUID
	Name          string
	Url           string
	UserID        uuid.UUID
	UserName      string
	FollowerCount sql.NullInt64
	PostCount     sql.NullInt64
}

func (q *Queries) GetFeeds(ctx context.Context) ([]GetFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsRow
	for rows.Next() {
		var i GetFeedsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.UserID,
			&i.UserName,
			&i.FollowerCount,
			&i.PostCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedsToFetch = `-- name: GetFeedsToFetch :many
SELECT
    feeds.id,
    feeds.name,
    feeds.url
FROM feeds
`

type GetFeedsToFetchRow struct {
	ID   uuid.UUID
	Name string
	Url  string
}

func (q *Queries) GetFeedsToFetch(ctx context.Context) ([]GetFeedsToFetchRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsToFetch)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsToFetchRow
	for rows.Next() {
		var i GetFeedsToFetchRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markFeedFetched = `-- name: MarkFeedFetched :exec
UPDATE feeds
SET 
    updated_at = $1,
    last_fetched_at = $1
WHERE id = $2
`

type MarkFeedFetchedParams struct {
	Time   time.Time
	FeedID uuid.UUID
}

func (q *Queries) MarkFeedFetched(ctx context.Context, arg MarkFeedFetchedParams) error {
	_, err := q.db.ExecContext(ctx, markFeedFetched, arg.Time, arg.FeedID)
	return err
}
